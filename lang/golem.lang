<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of Golem

 Authors: Ramiro Jose Garcia Moraga
 Copyright (C) 2017 Ramiro Jose Garcia Moraga <ramiro.jgmp@gmail.com>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="golem" _name="Golem" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-golem</property>
    <property name="globs">*.glm</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="common-defines"    _name="Common Defines"        map-to="def:special-constant"/>
    <style id="included-file"     _name="Included File"         map-to="def:string"/>
    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="storage-class"     _name="Storage Class"         map-to="def:type"/>
    <style id="printf"            _name="printf Conversion"     map-to="def:special-char"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="octal"             _name="Octal number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       _name="Hexadecimal number"    map-to="def:base-n-integer"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
    <style id="standard-stream"   _name="Standard stream"       map-to="def:constant"/>
    <style id="signal-name"       _name="Signal name"           map-to="def:constant"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
  </styles>

  <definitions>

    <!--regexs-->
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char" class="string">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (0|[1-9][0-9]*)[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>continue</keyword>
      <keyword>default</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>enum</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>return</keyword>
      <keyword>struct</keyword>
      <keyword>switch</keyword>
      <keyword>typedef</keyword>
      <keyword>while</keyword>
      <keyword>sharedobject</keyword>
      <keyword>using</keyword>
      <keyword>extern</keyword>
      <keyword>extends</keyword>
      <keyword>new</keyword>
      <keyword>property</keyword>
      <keyword>class</keyword>
      <keyword>static</keyword>
      <keyword>interface</keyword>
      <keyword>iterator</keyword>
      <keyword>signal</keyword>
      <keyword>setter</keyword>
      <keyword>getter</keyword>
    </context>

    <context id="operators" style-ref="operator">
      <keyword>pointerof</keyword>
      <keyword>sizeof</keyword>
      <keyword>typeof</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>bool</keyword>
      <keyword>char</keyword>
      <keyword>uchar</keyword>
      <keyword>byte</keyword>
      <keyword>ubyte</keyword>
      <keyword>double</keyword>
      <keyword>float</keyword>
      <keyword>int</keyword>
      <keyword>uint</keyword>
      <keyword>var</keyword>
      <keyword>pointer</keyword>
      <keyword>string</keyword>
      <keyword>object</keyword>
      <keyword>long</keyword>
      <keyword>ulong</keyword>
      <keyword>void</keyword>
      <keyword>function</keyword>
      <keyword>array</keyword>
    </context>

    <context id="storage-class" style-ref="storage-class">
      <keyword>const</keyword>
      <keyword>init</keyword>
      <keyword>class_init</keyword>
      <keyword>dispose</keyword>
      <keyword>constructed</keyword>
      <keyword>private</keyword>
    </context>

    <!-- C99 booleans -->
    <context id="boolean" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <context id="common-defines" style-ref="common-defines">
      <keyword>null</keyword>
      <keyword>this</keyword>
      <keyword>priv</keyword>
      <keyword>value</keyword>
    </context>


    <!--Main context-->
    <context id="golem" class="no-spell-check">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="def:c-like-comment" style-ref="comment"/>
        <context ref="def:c-like-comment-multiline" style-ref="comment"/>
        <context ref="def:c-like-close-comment-outside-comment" style-ref="comment"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="operators"/>
        <context ref="types"/>
        <context ref="storage-class"/>
        <context ref="boolean"/>
        <context ref="common-defines"/>
      </include>
    </context>
  </definitions>
</language>
